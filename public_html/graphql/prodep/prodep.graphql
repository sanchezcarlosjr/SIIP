extend type Query {
    prodep_nptcs: [ProdepNPTC] @paginate(defaultCount: 10)
    prodep_profiles (finish_date: Date @where(operator: ">=")): [ProdepProfile] @paginate(defaultCount: 200)
    prodep_helps: [ProdepHelp] @paginate(defaultCount: 100)
}

extend type Mutation {
    destroyProdepProfile(id: ID!): ProdepProfile @delete
    createProdepProfiles(
        data: createProdepProfilesInput
        @spread
    ): ProdepProfile
    updateProdepProfile(
        id: ID!
        start_date: Date
        finish_date: Date
        employee_id: Int
        prodep_area_id: Int
    ): ProdepProfile @update
    destroyProdepHelp(
        id: ID!
    ): ProdepHelp @delete
    createProdepHelps(
        data: createProdepHelpsInput
        @spread
    ): ProdepHelp @create
    updateProdepHelp(
        id: ID!
        amount: Float
        type: String
        date: Date
        employee_id: Int
    ): ProdepHelp @update
    destroyProdepNPTC(id: ID!): ProdepNPTC @delete
    createProdepNPTC(
        amount: String
        type: String
        date: Date
        employee_id: Int): ProdepNPTC @create
    updateProdepNPTC(
        id:ID!
        amount: String
        type: String
        date: Date
        employee_id: Int): ProdepNPTC @update
}

type ProdepProfile {
    id: ID!
    is_active: Boolean
    start_date: Date
    finish_date: Date
    employee_id: Int
    prodep_area_id: Int
    employee: Employee
    prodep_area: ProdepArea
}

input createProdepProfilesInput {
    start_date: Date
    years_to_finish: Int
    employee_id: Int
    prodep_area_id: Int
}

type ProdepHelp {
    id: ID!
    active: Boolean
    amount: Float
    type: String
    date: Date
    employee_id: Int
    employee: Employee
}

input createProdepHelpsInput {
    amount: Float
    type: String
    date: Date
    employee_id: Int
}

type ProdepNPTC {
    amount: String
    type: String
    date: Date
    employee_id: Int
    employee: Employee
    id: ID
    active: Boolean
}
