extend type Query {
    employee(nempleado: ID @eq): Employee @find
    employees(
        members: Boolean  @builder(
            method: "App\\GraphQL\\Queries\\Employee@is_lgac_member"
        ),
        free: Int @builder(
            method: "App\\GraphQL\\Queries\\FreeEmployee"
        ),
        filter: [String] @builder(
            method: "App\\GraphQL\\Queries\\Employee@filter"
        )
    ): [Employee] @paginate(defaultCount: 100)
}

type Employee {
    id: ID! @rename(attribute: "nempleado")
    lead_employee_id: ID! @rename(attribute: "nempleado")
    name: String @rename(attribute: "full_name")
    sexo: String
    age: Int
    nombre: String
    apaterno: String
    correo1: String
    amaterno: String
    grado: String
    academic_body: AcademicBody
    academic_unit: AcademicUnit @belongsTo(relation: "academic_unit")
    academic_bodies_lgacs: [LGAC]
    collaborator_academic_bodies: [AcademicBody]
    active: Boolean
    is_ptc: Boolean
    has_active_prodep_profile: Boolean
    has_active_sni: Boolean
    prodep_profiles: [ProdepProfile]
    snis: [Sni]
}

type AcademicUnit {
    id: ID! @rename(attribute: "nunidad")
    name: String @rename(attribute: "unidad")
    campus: String
}
