extend type Query {
    network(id: ID @eq): Network @find
    networks(
        filter: [String],
        orderBy: String @orderBy(columns: ["created_at"])
    ): [Network] @paginate(defaultCount: 100)
}

extend type Mutation {
    destroyNetwork(data: destroyNetworkInput! @spread): Network
    createNetwork(
        data: createNetworkInput
        @spread
    ): Network
    updateNetwork(
        data: updateNetworkInput
        @spread
    ): Network
}

type Network {
    id: ID!
    active: Boolean
    name: String
    type: String
    class: String
    start_date: Date
    range: String
    formation_url: String
    finish_date: Date
    academic_body_id: Int
    leader: CollaboratorNetwork
    collaborators: [CollaboratorNetwork]
    academic_body: AcademicBody @belongsTo(relation: "academic_body")
}

type CollaboratorNetwork {
    id: ID
    name: String
    type: String
    network: Network
    is_leader: Boolean
}

input Collaborator {
    id: ID
    name: String
    type: String
    is_leader: Boolean
    __typename: String
}

input createNetworkInput {
    name: String
    type: String
    class: String
    start_date: Date
    range: String
    finish_date: Date
    formation: [Upload]
    collaborators: [Collaborator]
    academic_body_id: Int
}

input updateNetworkInput {
    id: ID!
    name: String
    type: String
    class: String
    start_date: Date
    range: String
    formation: [Upload]
    collaborators: [Collaborator]
    formation_url: String
    finish_date: Date
    academic_body_id: Int
}

input destroyNetworkInput {
    id: ID!
}
