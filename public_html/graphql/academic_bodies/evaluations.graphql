extend type Query {
  evaluation(id: ID! @eq): Evaluation @find
  evaluations(
    grade: String @scope(name: "grade")
    academic_body_id: ID @scope(name: "academicBody")
    terms: [String] @scope(name: "terms")
  ): [Evaluation] @paginate(defaultCount: 100)
}

extend type Mutation {
  # destroyEvaluation(
  #     data: destroyEvaluationInput! @spread
  # ): Evaluation @delete
  # createEvaluation(
  #     data: createEvaluationInput
  #     @spread
  # ): Evaluation
  # updateEvaluation(
  #     data: updateEvaluationInput
  #     @spread
  # ): Evaluation
  upsert_evaluation(
    data: UpsertEvaluationInput @spread
  ): Evaluation @upsert
}

input UpsertEvaluationInput {
  id:ID
  grade: Int @rename(attribute: "grado")
  start_date: Date @rename(attribute: "fecha_inicio")
  years_to_finish: Int
  academic_body_id: ID @rename(attribute: "cuerpo_academico_id")
}

type Evaluation {
    id: ID
    active: Boolean
    grade: String
    grade_name: String
    start_date: Date  @rename(attribute: "fecha_inicio")
    finish_date: Date @rename(attribute: "fecha_fin")
    years_to_finish: Int
    academic_body: AcademicBody! @belongsTo(relation: "academic_bodies")
}

# input createEvaluationInput {
#     grade: String
#     years_to_finish: Int
#     start_date: Date
#     academic_body_id: ID
# }
#
# input updateEvaluationInput {
#     id:ID!
#     grade: String
#     years_to_finish: Int
#     start_date: Date
# }
#
# input destroyEvaluationInput {
#     id: ID!
# }
