"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    activities_pits: [ActivitiesPit] @paginate(defaultCount: 10)
    researchers: [Researcher] @paginate(defaultCount: 10)
    prodep_nptcs: [ProdepNPTC] @paginate(defaultCount: 10)
    snis: [Sni] @paginate(defaultCount: 10)
    prodep_profiles (finish_date: Date @where(operator: ">=")): [ProdepProfile] @paginate(defaultCount: 200)
    prodep_helps: [ProdepHelp] @paginate(defaultCount: 100)
    academic_body_statistics: AcademicBodyStatistics @field(resolver: "App\\GraphQL\\Queries\\AcademicBodyStatistics")
    users: [User] @paginate(defaultCount: 10)
    networks: [Network] @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    help(id: ID @eq): Help @find
    academic_bodies (orderBy: _ @orderBy(columns: ["created_at"])): [AcademicBody] @paginate(defaultCount: 200)
    evaluations: [Evaluation!]! @paginate(defaultCount: 100)
    helps: [Help] @paginate(defaultCount: 200)
    academic_body(id: ID @eq): AcademicBody @find
    prodep_area(id: ID @eq): ProdepArea @find
    prodep_areas: [ProdepArea]  @paginate(defaultCount: 200)
    uabc_areas: [UABCArea] @paginate(defaultCount: 200)
    des: [DES] @paginate(defaultCount: 200)
    desSearcher(id: ID @where(operator: "=", key: "cdes")): DES @find
    lgacs: [LGAC] @paginate(defaultCount: 200)
    employees(members: Boolean  @builder(method: "App\\GraphQL\\Queries\\ActiveMember"), free: Int @builder(method: "App\\GraphQL\\Queries\\FreeEmployee")): [Employee] @paginate(defaultCount: 100)
}

type Mutation {
    updateUsers(data: updateUsersInput! @spread): User @update
    deleteActivitiesPit(id: ID!): ActivitiesPit @delete
    createActivitiesPit(
        kind_of_applicant: String
        name_event: String
        asistence: String
        goal: String
        date: Date
        academic_unit_id: Int): ActivitiesPit @create
    updateActivitiesPit(
        id: ID!
        kind_of_applicant: String
        name_event: String
        asistence: String
        goal: String
        date: Date
        academic_unit_id: Int): ActivitiesPit @update
    destroyResearcher(
        id: ID!
    ): Researcher @delete
    createResearcher(
        valid: Int
        probative: String
        employee_id: Int): Researcher @create
    updateResearcher(
        Id:ID!
        valid: Int
        probative: String
        employee_id: Int): Researcher @update
    destroyProdepNPTC(id: ID!): ProdepNPTC @delete
    createProdepNPTC(
        amount: String
        type: String
        date: Date
        employee_id: Int): ProdepNPTC @create
    updateProdepNPTC(
        id:ID!
        amount: String
        type: String
        date: Date
        employee_id: Int): ProdepNPTC @update
    destroySni(
        id: ID!
    ): Sni @delete
    createSni(
        start_date: Date
        finish_date: Date
        discipline: String
        field: String
        request: String
        level: String
        specialty: String
        employee_id: Int
        sni_area_id: Int
    ): Sni @create
    updateSni(
        id: ID!
        start_date: Date
        finish_date: Date
        discipline: String
        field: String
        request: String
        level: String
        specialty: String
        employee_id: Int
        sni_area_id: Int
    ): Sni @update
    destroyProdepProfile(id: ID!): ProdepProfile @delete
    createProdepProfiles(
        data: createProdepProfilesInput
        @spread
    ): ProdepProfile
    updateProdepProfile(
        id: ID!
        start_date: Date
        finish_date: Date
        employee_id: Int
        prodep_area_id: Int
    ): ProdepProfile @update
    destroyProdepHelp(
        id: ID!
    ): ProdepHelp @delete
    createProdepHelps(
        data: createProdepHelpsInput
        @spread
    ): ProdepHelp @create
    updateProdepHelp(
        id: ID!
        amount: Float
        type: String
        date: Date
        employee_id: Int
    ): ProdepHelp @update
    destroyLgac(
        data: destroyLgacInput!
        @spread
    ):LGAC @delete
    updateLgac(
        data: updateLgacInput
        @spread
    ): LGAC @update
    createLgac(
        data: createLgacInput
        @spread
    ): LGAC @create
    destroyNetwork(name:String): Network
    createNetwork(
        data: createNetworkInput
        @spread
    ): Network @create
    updateNetwork(
        data: updateNetworkInput
        @spread
    ): Network @update
    destroyHelp(
        id: ID!
    ): Help
    createHelp(
        data: createHelpInput
        @spread
    ): Help @create
    updateHelp(
        data: updateHelpInput
        @spread
    ): Help @update
    destroyEvaluation(id:ID!): Evaluation @delete
    createEvaluation(
        data: createEvaluationInput
        @spread
    ): Evaluation
    updateEvaluation(
        data: updateEvaluationInput
        @spread
    ): Evaluation @update
    addEmployeesToAcademicBody(data: employeeToAcademicBodyInput @spread): AcademicBody
    removeEmployeesToAcademicBody(data: employeeToAcademicBodyInput @spread): AcademicBody
    destroyAcademicBody(id: ID!): AcademicBody @delete
    updateAcademicBody(
        data: updateAcademicBodyInput
        @spread
    ): AcademicBody @update
    createAcademicBody(
        data: createAcademicBodyInput
        @spread
    ): AcademicBody @create
}

#import academic-body.graphql
#import user.graphql
#import employee.graphql
#import prodep.graphql
#import sni.graphql
#import  prodep.graphql
#import  sni.graphql
#import  activities-pit.graphql
