extend type Query {
    sni_statistics(
        close_to_retirement: String
        close_to_expire: String
        terms: [String]
        campus: String
        gender: String
        from: String
        to: String
    ): SniStatistics
    researchers: [Researcher] @paginate(defaultCount: 10)
    sni(id: ID @eq): Sni @find
    snis(
        close_to_retirement: String @scope(name: "closeToRetirement")
        close_to_expire: String @scope(name: "closeToExpire")
        campus: String @scope(name: "campus")
        gender: String @scope(name: "gender")
        terms: [String] @scope(name: "terms")
    ): [Sni] @paginate(defaultCount: 10)
    sni_areas(name_like: String @scope(name: "name")): [SNIArea] @paginate(defaultCount: 100)
    sni_area(id: ID @eq): SNIArea @find
}

extend type Mutation {
    destroyResearcher(
        id: ID!
    ): Researcher @delete
    createResearcher(
        valid: Int
        probative: String
        employee_id: Int): Researcher @create
    updateResearcher(
        Id:ID!
        valid: Int
        probative: String
        employee_id: Int): Researcher @update
    destroySnis(
        data: destroySnisInput!
        @spread
    ): Sni @delete
    upsert_sni(
        data: UpsertSniInput
        @spread
    ): Sni @upsertWithFiles
}

type Sni {
    start_date: Date
    finish_date: Date
    discipline: String
    field: String
    request: String
    level: String
    specialty: String
    employee_id: Int
    employee: Employee
    appointment_url: String
    sni_area_id: Int
    sni_area: SNIArea
    id: ID
    is_active: Boolean
}

type SNIArea {
    id: ID
    name: String
}

type Researcher {
    valid: Date
    probative: Date
    employee_id: Int
    id: ID
    active: Boolean
    employee: Employee
}

input destroySnisInput {
    id: ID!
}

input UpsertSniInput {
    id: ID
    employee_id: Int
    start_date: Date
    finish_date: Date
    discipline: String
    field: String
    request: String
    level: String
    specialty: String
    sni_area_id: Int
    appointment: [Upload]
    appointment_url: String
}

type Dataset {
    id: String
    label: String
    data: [Int]
    stack: String
}

type SniStatistics {
    periods: [String]
    datasets: [Dataset]
    postgraduates: [Int]
    undergraduates: [Int]
    women: [Int]
    men: [Int]
}
